// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: Lexer.flex

import java.io.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\2\0\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\0\1\22"+
    "\1\23\1\24\1\25\2\0\13\26\1\27\1\26\1\30"+
    "\6\26\1\31\5\26\1\32\1\33\1\34\1\0\1\26"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\26\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\26\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\26\1\62\1\63\1\64\1\65\1\66\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\2\4\1\1\3\1\4"+
    "\2\5\1\6\2\5\1\7\1\10\1\11\1\12\1\11"+
    "\22\13\1\14\1\1\1\15\1\0\1\11\2\0\1\16"+
    "\4\0\1\17\2\0\1\13\1\5\1\0\1\20\1\0"+
    "\1\7\2\0\11\13\1\21\3\13\1\21\15\13\1\17"+
    "\11\0\1\7\1\0\30\13\4\0\1\13\1\0\1\20"+
    "\1\0\17\13\10\0\1\22\6\13\4\0\2\13\1\21"+
    "\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\67\0\67\0\u01b8\0\u01ef\0\156\0\67\0\u0226"+
    "\0\u025d\0\67\0\u0294\0\334\0\334\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\67"+
    "\0\u06a9\0\67\0\u06e0\0\156\0\u0717\0\u0113\0\156\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u01b8\0\u0861\0\u0898\0\156"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u02cb\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\156\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u082a\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u093d\0\u1167\0\u119e\0\u11d5\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\156\0\u17a2\0\156\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\156\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u0717\0\156\0\u10c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\26\1\27\1\26"+
    "\3\2\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\26\1\37\3\26\1\40\1\26\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\2\26\1\50\1\51\1\52"+
    "\1\0\2\4\1\0\1\4\6\0\1\53\144\0\1\3"+
    "\65\0\2\4\1\0\1\4\6\0\1\53\10\0\1\54"+
    "\42\0\1\55\2\56\1\55\1\56\1\55\1\57\4\55"+
    "\1\60\17\55\1\61\33\55\1\0\2\4\1\0\1\4"+
    "\6\0\1\53\24\0\1\62\4\0\1\63\22\0\2\4"+
    "\1\0\1\4\3\0\1\64\2\0\1\53\12\0\4\26"+
    "\3\0\27\26\4\0\2\65\1\0\1\65\4\0\1\66"+
    "\1\0\1\53\12\0\4\67\3\0\27\67\4\0\2\4"+
    "\1\0\1\4\6\0\1\53\1\70\53\0\2\4\1\0"+
    "\1\4\6\0\1\71\4\0\1\72\47\0\2\4\1\0"+
    "\1\4\6\0\1\53\3\0\1\73\1\0\1\74\46\0"+
    "\2\4\1\0\1\4\6\0\1\53\10\0\1\54\1\0"+
    "\4\75\3\0\27\75\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\27\26\24\0\1\26\4\0\3\26\1\77\1\76"+
    "\2\0\27\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\20\26\1\100\1\26\1\101\4\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\17\26\1\102\7\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\1\103\6\26\1\104\2\26"+
    "\1\105\2\26\1\106\11\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\4\26\1\107\10\26\1\110\11\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\12\26\1\103\14\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\12\26\1\111"+
    "\2\26\1\112\11\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\4\26\1\113\10\26\1\101\11\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\5\26\1\114\6\26\1\115"+
    "\12\26\24\0\1\26\4\0\4\26\1\76\2\0\22\26"+
    "\1\116\4\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\17\26\1\117\7\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\4\26\1\120\22\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\2\26\1\121\4\26\1\122\1\123\10\26"+
    "\1\124\2\26\1\125\2\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\25\26\1\126\1\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\14\26\1\127\12\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\15\26\1\130\11\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\7\26\1\131\17\26"+
    "\4\0\2\4\1\0\1\4\6\0\1\53\51\0\1\132"+
    "\2\0\2\53\1\0\1\53\4\0\1\133\55\0\6\55"+
    "\1\57\24\55\1\61\34\55\2\60\1\55\1\60\1\55"+
    "\1\57\2\55\1\134\21\55\1\61\35\55\3\0\62\55"+
    "\41\0\1\135\76\0\1\136\25\0\1\137\15\0\4\26"+
    "\3\0\27\26\31\0\4\140\3\0\27\140\24\0\1\67"+
    "\4\0\4\67\3\0\27\67\3\0\1\141\2\71\1\141"+
    "\1\71\4\141\1\142\1\141\1\143\53\141\2\72\1\0"+
    "\1\72\1\0\60\72\1\0\1\72\21\0\1\144\64\0"+
    "\1\73\1\0\1\74\64\0\1\145\1\0\1\75\4\0"+
    "\4\75\3\0\27\75\3\0\34\76\1\146\32\76\21\0"+
    "\1\26\4\0\1\26\1\147\2\26\1\76\2\0\27\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\13\26\1\114"+
    "\13\26\24\0\1\26\4\0\4\26\1\76\2\0\21\26"+
    "\1\150\5\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\4\26\1\151\22\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\20\26\1\152\6\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\1\112\26\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\17\26\1\153\7\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\14\26\1\154\12\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\5\26\1\155\21\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\22\26\1\156\4\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\15\26\1\157"+
    "\11\26\24\0\1\26\4\0\4\26\1\76\2\0\17\26"+
    "\1\114\7\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\21\26\1\160\5\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\21\26\1\114\5\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\12\26\1\161\14\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\10\26\1\162\16\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\21\26\1\163\5\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\1\164\26\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\15\26\1\165\11\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\6\26\1\166"+
    "\17\26\1\167\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\1\170\16\26\1\171\7\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\10\26\1\113\16\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\16\26\1\172\10\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\20\26\1\173\6\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\10\26\1\174\16\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\10\26\1\175"+
    "\16\26\31\0\4\176\3\0\27\176\3\0\6\55\1\57"+
    "\17\55\4\177\1\55\1\61\1\55\27\177\3\55\42\0"+
    "\1\200\63\0\1\201\41\0\1\202\6\0\1\140\4\0"+
    "\4\140\3\0\27\140\3\0\13\141\1\143\66\141\1\143"+
    "\12\141\4\203\3\141\27\203\16\141\1\143\4\141\1\204"+
    "\46\141\44\0\1\205\54\0\1\76\55\0\1\26\4\0"+
    "\1\26\1\114\2\26\1\76\2\0\27\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\15\26\1\114\11\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\1\206\26\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\4\26\1\114\22\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\20\26\1\207"+
    "\6\26\24\0\1\26\4\0\4\26\1\76\2\0\20\26"+
    "\1\115\1\210\5\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\1\211\26\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\1\26\1\175\25\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\1\115\26\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\2\26\1\212\24\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\12\26\1\114\14\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\14\26\1\213\12\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\22\26\1\214\4\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\14\26\1\215"+
    "\12\26\24\0\1\26\4\0\4\26\1\76\2\0\17\26"+
    "\1\115\7\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\14\26\1\216\12\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\4\26\1\217\22\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\21\26\1\220\5\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\10\26\1\221\11\26\1\222\4\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\4\26\1\223"+
    "\22\26\24\0\1\26\4\0\4\26\1\76\2\0\10\26"+
    "\1\224\16\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\3\26\1\114\23\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\12\26\1\152\14\26\4\0\2\225\1\0\1\225"+
    "\7\0\1\226\4\0\1\176\4\0\4\176\3\0\27\176"+
    "\3\0\1\55\2\227\1\55\1\227\1\55\1\57\5\55"+
    "\1\230\4\55\1\177\4\55\4\177\1\55\1\61\1\55"+
    "\27\177\3\55\45\0\1\231\70\0\1\232\17\0\1\141"+
    "\2\233\1\141\1\233\6\141\1\143\1\234\4\141\1\203"+
    "\4\141\4\203\3\141\27\203\3\141\25\0\1\235\62\0"+
    "\1\26\4\0\4\26\1\76\2\0\11\26\1\114\15\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\2\26\1\112"+
    "\24\26\24\0\1\26\4\0\4\26\1\76\2\0\10\26"+
    "\1\236\16\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\22\26\1\237\4\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\7\26\1\114\17\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\21\26\1\215\5\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\17\26\1\240\7\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\5\26\1\114\21\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\4\26\1\174\22\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\15\26\1\215"+
    "\11\26\24\0\1\26\4\0\4\26\1\76\2\0\10\26"+
    "\1\241\16\26\24\0\1\26\4\0\4\26\1\76\2\0"+
    "\14\26\1\242\12\26\24\0\1\26\4\0\4\26\1\76"+
    "\2\0\2\26\1\115\24\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\3\26\1\243\23\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\6\26\1\166\20\26\4\0\2\225"+
    "\1\0\1\225\7\0\1\226\53\0\2\226\1\0\1\226"+
    "\21\0\4\140\3\0\27\140\3\0\1\55\2\227\1\55"+
    "\1\227\1\55\1\57\5\55\1\230\16\55\1\61\34\55"+
    "\2\230\1\55\1\230\1\55\1\57\17\55\4\244\1\55"+
    "\1\61\1\55\27\244\3\55\51\0\1\245\74\0\1\246"+
    "\7\0\1\141\2\233\1\141\1\233\6\141\1\143\1\234"+
    "\53\141\2\234\1\141\1\234\6\141\1\143\12\141\4\247"+
    "\3\141\27\247\3\141\21\0\1\26\4\0\4\26\1\76"+
    "\2\0\14\26\1\250\12\26\24\0\1\26\4\0\4\26"+
    "\1\76\2\0\12\26\1\115\14\26\24\0\1\26\4\0"+
    "\4\26\1\76\2\0\14\26\1\114\12\26\24\0\1\26"+
    "\4\0\4\26\1\76\2\0\2\26\1\114\24\26\24\0"+
    "\1\26\4\0\4\26\1\76\2\0\6\26\1\114\20\26"+
    "\24\0\1\26\4\0\4\26\1\76\2\0\4\26\1\215"+
    "\22\26\3\0\6\55\1\57\3\55\1\251\6\55\1\244"+
    "\4\55\4\244\1\55\1\61\1\55\27\244\3\55\41\0"+
    "\1\252\65\0\1\245\26\0\12\141\1\253\1\143\5\141"+
    "\1\247\4\141\4\247\3\141\27\247\3\141\21\0\1\26"+
    "\4\0\4\26\1\76\2\0\22\26\1\152\4\26\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\1\0\11\1\1\11\34\1\1\0"+
    "\1\11\2\0\1\11\4\0\1\1\2\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\2\0\33\1\1\11\11\0"+
    "\1\1\1\0\30\1\4\0\1\11\1\0\1\11\1\0"+
    "\17\1\10\0\1\11\6\1\4\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

public String[] ids = new String[50];
public int lines = 0;
public int lastId = 0;

public static void main(String[] args)
{
    final String path = "../code.txt";

    try {
        String content = new FileHandler().read(path);
        Reader reader = new StringReader(content);
        Lexer lexer = new Lexer(reader);

        lexer.yylex();
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 19: break;
          case 2:
            { System.out.printf("\nLinha: %d\n", ++lines);
            }
            // fall through
          case 20: break;
          case 3:
            { System.out.printf("[l_paren, %s] ", yytext());
            }
            // fall through
          case 21: break;
          case 4:
            { System.out.printf("[r_paren, %s] ", yytext());
            }
            // fall through
          case 22: break;
          case 5:
            { System.out.printf("[arith_op, %s] ", yytext());
            }
            // fall through
          case 23: break;
          case 6:
            { System.out.printf("[comma, %s] ", yytext());
            }
            // fall through
          case 24: break;
          case 7:
            { System.out.printf("[num, %s] ", yytext());
            }
            // fall through
          case 25: break;
          case 8:
            { System.out.printf("[semicolon, %s] ", yytext());
            }
            // fall through
          case 26: break;
          case 9:
            { System.out.printf("[relational_op, %s] ", yytext());
            }
            // fall through
          case 27: break;
          case 10:
            { System.out.printf("[equal, %s] ", yytext());
            }
            // fall through
          case 28: break;
          case 11:
            { String texto = yytext();
    boolean found = false;

    for (int i = 0; i < lastId; i++) {
        if(texto.equals(ids[i])){
            System.out.printf("[id, %d] ", i);
            found = true;
            break;
        }
    }

    if(!found) {
        System.out.printf("[id, %d] ", lastId);
        ids[lastId++] = texto;
    }
            }
            // fall through
          case 29: break;
          case 12:
            { System.out.printf("[l_bracket, %s] ", yytext());
            }
            // fall through
          case 30: break;
          case 13:
            { System.out.printf("[r_bracket, %s] ", yytext());
            }
            // fall through
          case 31: break;
          case 14:
            { System.out.printf("[string_literal, %s] ", yytext());
            }
            // fall through
          case 32: break;
          case 15:
            { System.out.printf("[logic_op, %s] ", yytext());
            }
            // fall through
          case 33: break;
          case 16:
            { lines+= yytext().split("\\r\\n|\\n|\\r", -1).length - 1;
            }
            // fall through
          case 34: break;
          case 17:
            { System.out.printf("[reserved_word, %s] ", yytext());
            }
            // fall through
          case 35: break;
          case 18:
            { System.out.printf("[standard_library, %s] ", yytext());
            }
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
